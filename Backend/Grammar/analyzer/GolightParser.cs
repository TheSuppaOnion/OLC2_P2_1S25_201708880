//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Golight.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class GolightParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, TIPO=50, ASSIGN_SHORT=51, ASSIGN=52, 
		PLUS_ASSIGN=53, MINUS_ASSIGN=54, FLOAT64=55, INT=56, BOOLEANO=57, STRING=58, 
		ID=59, RUNE=60, WHITESPACE=61, SINGLELINE_COMMENT=62, MULTILINE_COMMENT=63;
	public const int
		RULE_program = 0, RULE_instruccion = 1, RULE_bloquessentencias = 2, RULE_declaration = 3, 
		RULE_slices = 4, RULE_lista_valores_slicemulti = 5, RULE_lista_valores = 6, 
		RULE_sentenciastransfer = 7, RULE_seccontrol = 8, RULE_if = 9, RULE_else = 10, 
		RULE_for = 11, RULE_switch = 12, RULE_lista_cases = 13, RULE_case = 14, 
		RULE_funcion = 15, RULE_lista_parametros = 16, RULE_print = 17, RULE_concatenacion = 18, 
		RULE_incredecre = 19, RULE_expression = 20, RULE_expr = 21, RULE_lista_expresiones = 22, 
		RULE_funcembebidas = 23, RULE_struct = 24, RULE_lista_valores_struct = 25, 
		RULE_listastruct = 26, RULE_valor = 27;
	public static readonly string[] ruleNames = {
		"program", "instruccion", "bloquessentencias", "declaration", "slices", 
		"lista_valores_slicemulti", "lista_valores", "sentenciastransfer", "seccontrol", 
		"if", "else", "for", "switch", "lista_cases", "case", "funcion", "lista_parametros", 
		"print", "concatenacion", "incredecre", "expression", "expr", "lista_expresiones", 
		"funcembebidas", "struct", "lista_valores_struct", "listastruct", "valor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'var'", "'{'", "'}'", "','", "'break'", "'continue'", 
		"'return'", "'if'", "'('", "')'", "'else'", "'for'", "';'", "'range'", 
		"'switch'", "'case'", "':'", "'default'", "'func'", "'fmt.Println'", "'++'", 
		"'--'", "'-'", "'!'", "'%'", "'*'", "'/'", "'+'", "'<'", "'>'", "'<='", 
		"'>='", "'.'", "'=='", "'!='", "'&&'", "'||'", "'strconv.Atoi'", "'strconv.ParseFloat'", 
		"'reflect.TypeOf'", "'slices.Index'", "'strings.Join'", "'len'", "'append'", 
		"'type'", "'struct'", "'nil'", null, "':='", "'='", "'+='", "'-='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "TIPO", "ASSIGN_SHORT", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"FLOAT64", "INT", "BOOLEANO", "STRING", "ID", "RUNE", "WHITESPACE", "SINGLELINE_COMMENT", 
		"MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Golight.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GolightParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GolightParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GolightParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GolightParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56;
				instruccion();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0) );
			State = 61;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncredecreContext incredecre() {
			return GetRuleContext<IncredecreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncembebidasContext funcembebidas() {
			return GetRuleContext<FuncembebidasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructContext @struct() {
			return GetRuleContext<StructContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenciastransferContext sentenciastransfer() {
			return GetRuleContext<SentenciastransferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SeccontrolContext seccontrol() {
			return GetRuleContext<SeccontrolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncionContext funcion() {
			return GetRuleContext<FuncionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BloquessentenciasContext bloquessentencias() {
			return GetRuleContext<BloquessentenciasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(Context, State);
		EnterRule(_localctx, 2, RULE_instruccion);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				slices();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65;
				print();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 66;
				incredecre();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				funcembebidas();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 68;
				@struct();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 69;
				sentenciastransfer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 70;
				seccontrol();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 71;
				funcion();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 72;
				bloquessentencias();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 73;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BloquessentenciasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		public BloquessentenciasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bloquessentencias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBloquessentencias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BloquessentenciasContext bloquessentencias() {
		BloquessentenciasContext _localctx = new BloquessentenciasContext(Context, State);
		EnterRule(_localctx, 4, RULE_bloquessentencias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(T__0);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 77;
				instruccion();
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0) );
			State = 82;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SHORT() { return GetToken(GolightParser.ASSIGN_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GolightParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_ASSIGN() { return GetToken(GolightParser.PLUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_ASSIGN() { return GetToken(GolightParser.MINUS_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(GolightParser.TIPO, 0); }
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				Match(ID);
				State = 85;
				Match(ASSIGN_SHORT);
				State = 86;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87;
				Match(ID);
				State = 88;
				Match(ASSIGN);
				State = 89;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				Match(ID);
				State = 91;
				Match(PLUS_ASSIGN);
				State = 92;
				expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				Match(ID);
				State = 94;
				Match(MINUS_ASSIGN);
				State = 95;
				expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 96;
				Match(T__2);
				State = 97;
				Match(ID);
				State = 98;
				Match(TIPO);
				State = 99;
				Match(ASSIGN);
				State = 100;
				expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 101;
				Match(T__2);
				State = 102;
				Match(ID);
				State = 103;
				Match(TIPO);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 104;
				Match(T__2);
				State = 105;
				expression();
				State = 106;
				Match(ASSIGN);
				State = 107;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SlicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(GolightParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valoresContext lista_valores() {
			return GetRuleContext<Lista_valoresContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SHORT() { return GetToken(GolightParser.ASSIGN_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GolightParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valores_slicemultiContext lista_valores_slicemulti() {
			return GetRuleContext<Lista_valores_slicemultiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValorContext valor() {
			return GetRuleContext<ValorContext>(0);
		}
		public SlicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicesContext slices() {
		SlicesContext _localctx = new SlicesContext(Context, State);
		EnterRule(_localctx, 8, RULE_slices);
		int _la;
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				Match(ID);
				State = 112;
				_la = TokenStream.LA(1);
				if ( !(_la==ASSIGN_SHORT || _la==ASSIGN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 113;
				Match(T__0);
				State = 114;
				Match(T__1);
				State = 115;
				Match(TIPO);
				State = 116;
				Match(T__3);
				State = 117;
				lista_valores(0);
				State = 118;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				Match(T__2);
				State = 121;
				Match(ID);
				State = 122;
				Match(T__0);
				State = 123;
				Match(T__1);
				State = 124;
				Match(TIPO);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 125;
				Match(ID);
				State = 126;
				Match(ASSIGN_SHORT);
				State = 127;
				Match(T__0);
				State = 128;
				Match(T__1);
				State = 129;
				Match(T__0);
				State = 130;
				Match(T__1);
				State = 131;
				Match(TIPO);
				State = 132;
				Match(T__3);
				State = 133;
				lista_valores_slicemulti();
				State = 134;
				Match(T__5);
				State = 135;
				Match(T__4);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 137;
				Match(ID);
				State = 138;
				Match(T__0);
				State = 139;
				expression();
				State = 140;
				Match(T__1);
				State = 141;
				Match(T__0);
				State = 142;
				expression();
				State = 143;
				Match(T__1);
				State = 144;
				Match(ASSIGN);
				State = 145;
				Match(T__3);
				State = 146;
				lista_valores_slicemulti();
				State = 147;
				Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 149;
				Match(ID);
				State = 150;
				Match(T__0);
				State = 151;
				expression();
				State = 152;
				Match(T__1);
				State = 153;
				Match(T__0);
				State = 154;
				expression();
				State = 155;
				Match(T__1);
				State = 156;
				Match(ASSIGN);
				State = 157;
				valor();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 159;
				Match(ID);
				State = 160;
				Match(T__0);
				State = 161;
				expression();
				State = 162;
				Match(T__1);
				State = 163;
				Match(ASSIGN);
				State = 164;
				valor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_valores_slicemultiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valoresContext[] lista_valores() {
			return GetRuleContexts<Lista_valoresContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valoresContext lista_valores(int i) {
			return GetRuleContext<Lista_valoresContext>(i);
		}
		public Lista_valores_slicemultiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_valores_slicemulti; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_valores_slicemulti(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_valores_slicemultiContext lista_valores_slicemulti() {
		Lista_valores_slicemultiContext _localctx = new Lista_valores_slicemultiContext(Context, State);
		EnterRule(_localctx, 10, RULE_lista_valores_slicemulti);
		try {
			int _alt;
			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				Match(T__3);
				State = 169;
				lista_valores(0);
				State = 170;
				Match(T__4);
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 171;
						Match(T__5);
						State = 172;
						Match(T__3);
						State = 173;
						lista_valores(0);
						State = 174;
						Match(T__4);
						}
						} 
					}
					State = 180;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				Match(T__3);
				State = 182;
				lista_valores(0);
				State = 183;
				Match(T__4);
				State = 184;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_valoresContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valoresContext lista_valores() {
			return GetRuleContext<Lista_valoresContext>(0);
		}
		public Lista_valoresContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_valores; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_valores(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_valoresContext lista_valores() {
		return lista_valores(0);
	}

	private Lista_valoresContext lista_valores(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Lista_valoresContext _localctx = new Lista_valoresContext(Context, _parentState);
		Lista_valoresContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_lista_valores, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 189;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Lista_valoresContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_lista_valores);
					State = 191;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 192;
					Match(T__5);
					State = 193;
					expression();
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SentenciastransferContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SentenciastransferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentenciastransfer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentenciastransfer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenciastransferContext sentenciastransfer() {
		SentenciastransferContext _localctx = new SentenciastransferContext(Context, State);
		EnterRule(_localctx, 14, RULE_sentenciastransfer);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199;
				Match(T__6);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				Match(T__7);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201;
				Match(T__8);
				State = 203;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 202;
					expression();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeccontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext[] @if() {
			return GetRuleContexts<IfContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if(int i) {
			return GetRuleContext<IfContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext[] @for() {
			return GetRuleContexts<ForContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for(int i) {
			return GetRuleContext<ForContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext[] @switch() {
			return GetRuleContexts<SwitchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchContext @switch(int i) {
			return GetRuleContext<SwitchContext>(i);
		}
		public SeccontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seccontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeccontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeccontrolContext seccontrol() {
		SeccontrolContext _localctx = new SeccontrolContext(Context, State);
		EnterRule(_localctx, 16, RULE_seccontrol);
		try {
			int _alt;
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 207;
						@if();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 210;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 212;
						@for();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 215;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 3);
				{
				State = 218;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 217;
						@switch();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 220;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 18, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(T__9);
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 225;
				Match(T__10);
				}
				break;
			}
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 228;
				expression();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2270516800225544194L) != 0) );
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 233;
				Match(T__11);
				}
			}

			State = 236;
			Match(T__3);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
				{
				{
				State = 237;
				instruccion();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243;
			Match(T__4);
			State = 245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 244;
				@else();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
	 
		public ElseContext() { }
		public virtual void CopyFrom(ElseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseIfContext : ElseContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public ElseIfContext(ElseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElseBlockContext : ElseContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		public ElseBlockContext(ElseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 20, RULE_else);
		int _la;
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new ElseIfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				Match(T__12);
				State = 248;
				@if();
				}
				break;
			case 2:
				_localctx = new ElseBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 249;
				Match(T__12);
				State = 250;
				Match(T__3);
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
					{
					{
					State = 251;
					instruccion();
					}
					}
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 257;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SHORT() { return GetToken(GolightParser.ASSIGN_SHORT, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 22, RULE_for);
		int _la;
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				Match(T__13);
				State = 261;
				expression();
				{
				State = 262;
				Match(T__3);
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
					{
					{
					State = 263;
					instruccion();
					}
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 269;
				Match(T__4);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271;
				Match(T__13);
				State = 272;
				declaration();
				State = 273;
				Match(T__14);
				State = 274;
				expression();
				State = 275;
				Match(T__14);
				State = 276;
				instruccion();
				State = 277;
				Match(T__3);
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
					{
					{
					State = 278;
					instruccion();
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 284;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286;
				Match(T__13);
				State = 287;
				expression();
				State = 288;
				Match(T__5);
				State = 289;
				expression();
				State = 290;
				Match(ASSIGN_SHORT);
				State = 291;
				Match(T__15);
				State = 292;
				expression();
				State = 293;
				Match(T__3);
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
					{
					{
					State = 294;
					instruccion();
					}
					}
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 300;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_casesContext[] lista_cases() {
			return GetRuleContexts<Lista_casesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_casesContext lista_cases(int i) {
			return GetRuleContext<Lista_casesContext>(i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 24, RULE_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			Match(T__16);
			State = 305;
			expression();
			State = 306;
			Match(T__3);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 307;
				lista_cases(0);
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__17 || _la==T__19 );
			State = 312;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_casesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case() {
			return GetRuleContext<CaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_casesContext lista_cases() {
			return GetRuleContext<Lista_casesContext>(0);
		}
		public Lista_casesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_cases; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_cases(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_casesContext lista_cases() {
		return lista_cases(0);
	}

	private Lista_casesContext lista_cases(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Lista_casesContext _localctx = new Lista_casesContext(Context, _parentState);
		Lista_casesContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_lista_cases, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 315;
			@case();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 321;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Lista_casesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_lista_cases);
					State = 317;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 318;
					@case();
					}
					} 
				}
				State = 323;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 28, RULE_case);
		try {
			int _alt;
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324;
				Match(T__17);
				State = 325;
				expression();
				State = 326;
				Match(T__18);
				State = 330;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 327;
						instruccion();
						}
						} 
					}
					State = 332;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				Match(T__19);
				State = 334;
				Match(T__18);
				State = 338;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 335;
						instruccion();
						}
						} 
					}
					State = 340;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_parametrosContext lista_parametros() {
			return GetRuleContext<Lista_parametrosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext[] instruccion() {
			return GetRuleContexts<InstruccionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstruccionContext instruccion(int i) {
			return GetRuleContext<InstruccionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(GolightParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FuncionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncionContext funcion() {
		FuncionContext _localctx = new FuncionContext(Context, State);
		EnterRule(_localctx, 30, RULE_funcion);
		int _la;
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				Match(T__20);
				State = 344;
				Match(ID);
				State = 345;
				Match(T__10);
				State = 346;
				lista_parametros();
				State = 347;
				Match(T__11);
				State = 348;
				Match(T__3);
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
					{
					{
					State = 349;
					instruccion();
					}
					}
					State = 354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 355;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				Match(T__20);
				State = 358;
				Match(ID);
				State = 359;
				Match(T__10);
				State = 360;
				lista_parametros();
				State = 361;
				Match(T__11);
				State = 362;
				Match(TIPO);
				State = 363;
				Match(T__3);
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
					{
					{
					State = 364;
					instruccion();
					}
					}
					State = 369;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 370;
				Match(T__4);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				Match(T__20);
				State = 373;
				Match(T__10);
				State = 374;
				expression();
				State = 375;
				expression();
				State = 376;
				Match(T__11);
				State = 377;
				Match(ID);
				State = 378;
				Match(T__10);
				State = 379;
				lista_parametros();
				State = 380;
				Match(T__11);
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TIPO) {
					{
					State = 381;
					Match(TIPO);
					}
				}

				State = 384;
				Match(T__3);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270657537720340362L) != 0)) {
					{
					{
					State = 385;
					instruccion();
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 391;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_parametrosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GolightParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GolightParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TIPO() { return GetTokens(GolightParser.TIPO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO(int i) {
			return GetToken(GolightParser.TIPO, i);
		}
		public Lista_parametrosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_parametros; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_parametros(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_parametrosContext lista_parametros() {
		Lista_parametrosContext _localctx = new Lista_parametrosContext(Context, State);
		EnterRule(_localctx, 32, RULE_lista_parametros);
		int _la;
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				Match(ID);
				State = 396;
				Match(TIPO);
				State = 402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 397;
					Match(T__5);
					State = 398;
					Match(ID);
					State = 399;
					Match(TIPO);
					}
					}
					State = 404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenacionContext concatenacion() {
			return GetRuleContext<ConcatenacionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 34, RULE_print);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			Match(T__21);
			State = 409;
			Match(T__10);
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270516800225544194L) != 0)) {
				{
				State = 410;
				concatenacion(0);
				}
			}

			State = 413;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatenacionContext concatenacion() {
			return GetRuleContext<ConcatenacionContext>(0);
		}
		public ConcatenacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenacionContext concatenacion() {
		return concatenacion(0);
	}

	private ConcatenacionContext concatenacion(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConcatenacionContext _localctx = new ConcatenacionContext(Context, _parentState);
		ConcatenacionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_concatenacion, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 416;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 423;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConcatenacionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_concatenacion);
					State = 418;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 419;
					Match(T__5);
					State = 420;
					expression();
					}
					} 
				}
				State = 425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IncredecreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		public IncredecreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incredecre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncredecre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncredecreContext incredecre() {
		IncredecreContext _localctx = new IncredecreContext(Context, State);
		EnterRule(_localctx, 38, RULE_incredecre);
		try {
			State = 430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426;
				Match(ID);
				State = 427;
				Match(T__22);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428;
				Match(ID);
				State = 429;
				Match(T__23);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Logical_ORContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Logical_ORContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_OR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class INTContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GolightParser.INT, 0); }
		public INTContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitINT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoArregloContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AccesoArregloContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoArreglo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ConcatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoStructContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GolightParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GolightParser.ID, i);
		}
		public AccesoStructContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LlamadaFuncionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_expresionesContext lista_expresiones() {
			return GetRuleContext<Lista_expresionesContext>(0);
		}
		public LlamadaFuncionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLlamadaFuncion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoArregloMultiContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AccesoArregloMultiContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoArregloMulti(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnarioContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnarioContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnario(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IDContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		public IDContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RUNEContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(GolightParser.RUNE, 0); }
		public RUNEContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRUNE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LlamadaMetodoContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GolightParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GolightParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_expresionesContext lista_expresiones() {
			return GetRuleContext<Lista_expresionesContext>(0);
		}
		public LlamadaMetodoContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLlamadaMetodo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ModContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FLOAT64Context : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT64() { return GetToken(GolightParser.FLOAT64, 0); }
		public FLOAT64Context(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFLOAT64(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelationalContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AgrupacionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AgrupacionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgrupacion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Logical_ANDContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Logical_ANDContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_AND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncionesEmbebidasContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncembebidasContext funcembebidas() {
			return GetRuleContext<FuncembebidasContext>(0);
		}
		public FuncionesEmbebidasContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncionesEmbebidas(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValorExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValorContext valor() {
			return GetRuleContext<ValorContext>(0);
		}
		public ValorExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class STRINGContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GolightParser.STRING, 0); }
		public STRINGContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSTRING(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccesoStructListaContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AccesoStructListaContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccesoStructLista(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AgrupacionCorchetesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AgrupacionCorchetesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAgrupacionCorchetes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BOOLEANOContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(GolightParser.BOOLEANO, 0); }
		public BOOLEANOContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOOLEANO(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				_localctx = new AgrupacionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 435;
				Match(T__10);
				State = 436;
				expr(0);
				State = 437;
				Match(T__11);
				}
				break;
			case 2:
				{
				_localctx = new AgrupacionCorchetesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 439;
				Match(T__0);
				State = 440;
				expr(0);
				State = 441;
				Match(T__1);
				}
				break;
			case 3:
				{
				_localctx = new UnarioContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 443;
				Match(T__24);
				State = 444;
				expr(24);
				}
				break;
			case 4:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 445;
				Match(T__25);
				State = 446;
				expr(23);
				}
				break;
			case 5:
				{
				_localctx = new INTContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 447;
				Match(INT);
				}
				break;
			case 6:
				{
				_localctx = new FLOAT64Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 448;
				Match(FLOAT64);
				}
				break;
			case 7:
				{
				_localctx = new BOOLEANOContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 449;
				Match(BOOLEANO);
				}
				break;
			case 8:
				{
				_localctx = new STRINGContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 450;
				Match(STRING);
				}
				break;
			case 9:
				{
				_localctx = new RUNEContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 451;
				Match(RUNE);
				}
				break;
			case 10:
				{
				_localctx = new LlamadaMetodoContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 452;
				Match(ID);
				State = 453;
				Match(T__34);
				State = 454;
				Match(ID);
				State = 455;
				Match(T__10);
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270516800225544194L) != 0)) {
					{
					State = 456;
					lista_expresiones(0);
					}
				}

				State = 459;
				Match(T__11);
				}
				break;
			case 11:
				{
				_localctx = new LlamadaFuncionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 460;
				Match(ID);
				State = 461;
				Match(T__10);
				State = 463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2270516800225544194L) != 0)) {
					{
					State = 462;
					lista_expresiones(0);
					}
				}

				State = 465;
				Match(T__11);
				}
				break;
			case 12:
				{
				_localctx = new AccesoArregloMultiContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 466;
				Match(ID);
				State = 467;
				Match(T__0);
				State = 468;
				expr(0);
				State = 469;
				Match(T__1);
				State = 470;
				Match(T__0);
				State = 471;
				expr(0);
				State = 472;
				Match(T__1);
				}
				break;
			case 13:
				{
				_localctx = new AccesoArregloContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 474;
				Match(ID);
				State = 475;
				Match(T__0);
				State = 476;
				expr(0);
				State = 477;
				Match(T__1);
				}
				break;
			case 14:
				{
				_localctx = new AccesoStructContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 479;
				Match(ID);
				State = 480;
				Match(T__34);
				State = 481;
				Match(ID);
				}
				break;
			case 15:
				{
				_localctx = new AccesoStructListaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 482;
				Match(ID);
				State = 483;
				Match(T__34);
				State = 484;
				expression();
				}
				break;
			case 16:
				{
				_localctx = new IDContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 485;
				Match(ID);
				}
				break;
			case 17:
				{
				_localctx = new ValorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 486;
				valor();
				}
				break;
			case 18:
				{
				_localctx = new FuncionesEmbebidasContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 487;
				funcembebidas();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 516;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 514;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						_localctx = new ModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 490;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 491;
						Match(T__26);
						State = 492;
						expr(23);
						}
						break;
					case 2:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 493;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 494;
						_la = TokenStream.LA(1);
						if ( !(_la==T__27 || _la==T__28) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 495;
						expr(22);
						}
						break;
					case 3:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 496;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 497;
						_la = TokenStream.LA(1);
						if ( !(_la==T__24 || _la==T__29) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 498;
						expr(21);
						}
						break;
					case 4:
						{
						_localctx = new RelationalContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 499;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 500;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 32212254720L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 501;
						expr(20);
						}
						break;
					case 5:
						{
						_localctx = new ConcatContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 502;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 503;
						Match(T__34);
						State = 504;
						expr(19);
						}
						break;
					case 6:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 505;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 506;
						_la = TokenStream.LA(1);
						if ( !(_la==T__35 || _la==T__36) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 507;
						expr(18);
						}
						break;
					case 7:
						{
						_localctx = new Logical_ANDContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 508;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 509;
						Match(T__37);
						State = 510;
						expr(17);
						}
						break;
					case 8:
						{
						_localctx = new Logical_ORContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 511;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 512;
						Match(T__38);
						State = 513;
						expr(16);
						}
						break;
					}
					} 
				}
				State = 518;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Lista_expresionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_expresionesContext lista_expresiones() {
			return GetRuleContext<Lista_expresionesContext>(0);
		}
		public Lista_expresionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_expresiones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_expresiones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_expresionesContext lista_expresiones() {
		return lista_expresiones(0);
	}

	private Lista_expresionesContext lista_expresiones(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Lista_expresionesContext _localctx = new Lista_expresionesContext(Context, _parentState);
		Lista_expresionesContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_lista_expresiones, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 520;
			expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Lista_expresionesContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_lista_expresiones);
					State = 522;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 523;
					Match(T__5);
					State = 524;
					expr(0);
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncembebidasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GolightParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValorContext valor() {
			return GetRuleContext<ValorContext>(0);
		}
		public FuncembebidasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcembebidas; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncembebidas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncembebidasContext funcembebidas() {
		FuncembebidasContext _localctx = new FuncembebidasContext(Context, State);
		EnterRule(_localctx, 46, RULE_funcembebidas);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__39:
				EnterOuterAlt(_localctx, 1);
				{
				State = 530;
				Match(T__39);
				State = 531;
				Match(T__10);
				State = 532;
				Match(STRING);
				State = 533;
				Match(T__11);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 2);
				{
				State = 534;
				Match(T__40);
				State = 535;
				Match(T__10);
				State = 536;
				Match(STRING);
				State = 537;
				Match(T__11);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 3);
				{
				State = 538;
				Match(T__41);
				State = 539;
				Match(T__10);
				State = 540;
				Match(ID);
				State = 541;
				Match(T__11);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 4);
				{
				State = 542;
				Match(T__42);
				State = 543;
				Match(T__10);
				State = 544;
				Match(ID);
				State = 545;
				Match(T__5);
				State = 546;
				valor();
				State = 547;
				Match(T__11);
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 5);
				{
				State = 549;
				Match(T__43);
				State = 550;
				Match(T__10);
				State = 551;
				Match(ID);
				State = 552;
				Match(T__5);
				State = 553;
				Match(STRING);
				State = 554;
				Match(T__11);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 6);
				{
				State = 555;
				Match(T__44);
				State = 556;
				Match(T__10);
				State = 563;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 557;
					Match(ID);
					}
					break;
				case 2:
					{
					State = 558;
					Match(ID);
					State = 559;
					Match(T__0);
					State = 560;
					valor();
					State = 561;
					Match(T__1);
					}
					break;
				}
				State = 565;
				Match(T__11);
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 7);
				{
				State = 566;
				Match(T__45);
				State = 567;
				Match(T__10);
				State = 568;
				Match(ID);
				State = 569;
				Match(T__5);
				State = 570;
				valor();
				State = 571;
				Match(T__11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListastructContext[] listastruct() {
			return GetRuleContexts<ListastructContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListastructContext listastruct(int i) {
			return GetRuleContext<ListastructContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GolightParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_SHORT() { return GetToken(GolightParser.ASSIGN_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valores_structContext[] lista_valores_struct() {
			return GetRuleContexts<Lista_valores_structContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lista_valores_structContext lista_valores_struct(int i) {
			return GetRuleContext<Lista_valores_structContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 48, RULE_struct);
		int _la;
		try {
			State = 612;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575;
				Match(T__46);
				State = 576;
				Match(ID);
				State = 577;
				Match(T__47);
				State = 578;
				Match(T__3);
				State = 580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 579;
					listastruct();
					}
					}
					State = 582;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ID );
				State = 584;
				Match(T__4);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586;
				expression();
				State = 587;
				Match(ASSIGN);
				State = 588;
				expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 590;
				expression();
				State = 591;
				Match(ASSIGN_SHORT);
				State = 592;
				expression();
				State = 593;
				Match(T__3);
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 594;
					lista_valores_struct();
					}
					}
					State = 597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2271642700132386818L) != 0) );
				State = 599;
				Match(T__4);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 601;
				expression();
				State = 602;
				Match(T__34);
				State = 603;
				expression();
				State = 604;
				Match(T__10);
				State = 606;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 605;
					lista_valores_struct();
					}
					}
					State = 608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 2271642700132386818L) != 0) );
				State = 610;
				Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lista_valores_structContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(GolightParser.TIPO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		public Lista_valores_structContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lista_valores_struct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLista_valores_struct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lista_valores_structContext lista_valores_struct() {
		Lista_valores_structContext _localctx = new Lista_valores_structContext(Context, State);
		EnterRule(_localctx, 50, RULE_lista_valores_struct);
		int _la;
		try {
			int _alt;
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 618;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 614;
						expression();
						State = 615;
						Match(T__18);
						State = 616;
						expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 620;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 623;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 622;
					Match(T__5);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 626;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 625;
						expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 628;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 630;
					Match(T__5);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 633;
				Match(TIPO);
				State = 634;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListastructContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(GolightParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(GolightParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIPO() { return GetToken(GolightParser.TIPO, 0); }
		public ListastructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listastruct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListastruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListastructContext listastruct() {
		ListastructContext _localctx = new ListastructContext(Context, State);
		EnterRule(_localctx, 52, RULE_listastruct);
		try {
			State = 641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637;
				Match(ID);
				State = 638;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 639;
				Match(ID);
				State = 640;
				Match(TIPO);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValorContext : ParserRuleContext {
		public ValorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valor; } }
	 
		public ValorContext() { }
		public virtual void CopyFrom(ValorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NilContext : ValorContext {
		public NilContext(ValorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Float64Context : ValorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT64() { return GetToken(GolightParser.FLOAT64, 0); }
		public Float64Context(ValorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat64(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ValorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(GolightParser.STRING, 0); }
		public StringContext(ValorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanoContext : ValorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEANO() { return GetToken(GolightParser.BOOLEANO, 0); }
		public BooleanoContext(ValorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleano(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ValorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(GolightParser.ID, 0); }
		public IdContext(ValorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RuneContext : ValorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE() { return GetToken(GolightParser.RUNE, 0); }
		public RuneContext(ValorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRune(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ValorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(GolightParser.INT, 0); }
		public IntContext(ValorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGolightVisitor<TResult> typedVisitor = visitor as IGolightVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValorContext valor() {
		ValorContext _localctx = new ValorContext(Context, State);
		EnterRule(_localctx, 54, RULE_valor);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 643;
				Match(INT);
				}
				break;
			case FLOAT64:
				_localctx = new Float64Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 644;
				Match(FLOAT64);
				}
				break;
			case STRING:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 645;
				Match(STRING);
				}
				break;
			case RUNE:
				_localctx = new RuneContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 646;
				Match(RUNE);
				}
				break;
			case BOOLEANO:
				_localctx = new BooleanoContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 647;
				Match(BOOLEANO);
				}
				break;
			case ID:
				_localctx = new IdContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 648;
				Match(ID);
				}
				break;
			case T__48:
				_localctx = new NilContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 649;
				Match(T__48);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return lista_valores_sempred((Lista_valoresContext)_localctx, predIndex);
		case 13: return lista_cases_sempred((Lista_casesContext)_localctx, predIndex);
		case 18: return concatenacion_sempred((ConcatenacionContext)_localctx, predIndex);
		case 21: return expr_sempred((ExprContext)_localctx, predIndex);
		case 22: return lista_expresiones_sempred((Lista_expresionesContext)_localctx, predIndex);
		}
		return true;
	}
	private bool lista_valores_sempred(Lista_valoresContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool lista_cases_sempred(Lista_casesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool concatenacion_sempred(ConcatenacionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 22);
		case 4: return Precpred(Context, 21);
		case 5: return Precpred(Context, 20);
		case 6: return Precpred(Context, 19);
		case 7: return Precpred(Context, 18);
		case 8: return Precpred(Context, 17);
		case 9: return Precpred(Context, 16);
		case 10: return Precpred(Context, 15);
		}
		return true;
	}
	private bool lista_expresiones_sempred(Lista_expresionesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,63,653,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,4,0,58,
		8,0,11,0,12,0,59,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
		1,75,8,1,1,2,1,2,4,2,79,8,2,11,2,12,2,80,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,3,3,110,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,167,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,5,5,177,8,5,10,5,12,5,180,9,5,1,5,1,5,1,5,1,5,1,5,3,5,187,8,5,1,6,
		1,6,1,6,1,6,1,6,1,6,5,6,195,8,6,10,6,12,6,198,9,6,1,7,1,7,1,7,1,7,3,7,
		204,8,7,3,7,206,8,7,1,8,4,8,209,8,8,11,8,12,8,210,1,8,4,8,214,8,8,11,8,
		12,8,215,1,8,4,8,219,8,8,11,8,12,8,220,3,8,223,8,8,1,9,1,9,3,9,227,8,9,
		1,9,4,9,230,8,9,11,9,12,9,231,1,9,3,9,235,8,9,1,9,1,9,5,9,239,8,9,10,9,
		12,9,242,9,9,1,9,1,9,3,9,246,8,9,1,10,1,10,1,10,1,10,1,10,5,10,253,8,10,
		10,10,12,10,256,9,10,1,10,3,10,259,8,10,1,11,1,11,1,11,1,11,5,11,265,8,
		11,10,11,12,11,268,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,5,11,280,8,11,10,11,12,11,283,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,5,11,296,8,11,10,11,12,11,299,9,11,1,11,1,11,3,
		11,303,8,11,1,12,1,12,1,12,1,12,4,12,309,8,12,11,12,12,12,310,1,12,1,12,
		1,13,1,13,1,13,1,13,1,13,5,13,320,8,13,10,13,12,13,323,9,13,1,14,1,14,
		1,14,1,14,5,14,329,8,14,10,14,12,14,332,9,14,1,14,1,14,1,14,5,14,337,8,
		14,10,14,12,14,340,9,14,3,14,342,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,5,15,351,8,15,10,15,12,15,354,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,5,15,366,8,15,10,15,12,15,369,9,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,383,8,15,1,15,1,15,5,15,
		387,8,15,10,15,12,15,390,9,15,1,15,1,15,3,15,394,8,15,1,16,1,16,1,16,1,
		16,1,16,5,16,401,8,16,10,16,12,16,404,9,16,1,16,3,16,407,8,16,1,17,1,17,
		1,17,3,17,412,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,5,18,422,8,
		18,10,18,12,18,425,9,18,1,19,1,19,1,19,1,19,3,19,431,8,19,1,20,1,20,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,458,8,21,1,21,1,21,1,21,
		1,21,3,21,464,8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,489,
		8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,515,8,21,10,
		21,12,21,518,9,21,1,22,1,22,1,22,1,22,1,22,1,22,5,22,526,8,22,10,22,12,
		22,529,9,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,564,8,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,3,23,574,8,23,1,24,1,24,1,24,1,24,1,24,4,24,581,8,24,
		11,24,12,24,582,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		4,24,596,8,24,11,24,12,24,597,1,24,1,24,1,24,1,24,1,24,1,24,1,24,4,24,
		607,8,24,11,24,12,24,608,1,24,1,24,3,24,613,8,24,1,25,1,25,1,25,1,25,4,
		25,619,8,25,11,25,12,25,620,1,25,3,25,624,8,25,1,25,4,25,627,8,25,11,25,
		12,25,628,1,25,3,25,632,8,25,1,25,1,25,3,25,636,8,25,1,26,1,26,1,26,1,
		26,3,26,642,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,651,8,27,1,27,
		0,5,12,26,36,42,44,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,0,5,1,0,51,52,1,0,28,29,2,0,25,25,30,30,
		1,0,31,34,1,0,36,37,740,0,57,1,0,0,0,2,74,1,0,0,0,4,76,1,0,0,0,6,109,1,
		0,0,0,8,166,1,0,0,0,10,186,1,0,0,0,12,188,1,0,0,0,14,205,1,0,0,0,16,222,
		1,0,0,0,18,224,1,0,0,0,20,258,1,0,0,0,22,302,1,0,0,0,24,304,1,0,0,0,26,
		314,1,0,0,0,28,341,1,0,0,0,30,393,1,0,0,0,32,406,1,0,0,0,34,408,1,0,0,
		0,36,415,1,0,0,0,38,430,1,0,0,0,40,432,1,0,0,0,42,488,1,0,0,0,44,519,1,
		0,0,0,46,573,1,0,0,0,48,612,1,0,0,0,50,635,1,0,0,0,52,641,1,0,0,0,54,650,
		1,0,0,0,56,58,3,2,1,0,57,56,1,0,0,0,58,59,1,0,0,0,59,57,1,0,0,0,59,60,
		1,0,0,0,60,61,1,0,0,0,61,62,5,0,0,1,62,1,1,0,0,0,63,75,3,8,4,0,64,75,3,
		6,3,0,65,75,3,34,17,0,66,75,3,38,19,0,67,75,3,46,23,0,68,75,3,48,24,0,
		69,75,3,14,7,0,70,75,3,16,8,0,71,75,3,30,15,0,72,75,3,4,2,0,73,75,3,40,
		20,0,74,63,1,0,0,0,74,64,1,0,0,0,74,65,1,0,0,0,74,66,1,0,0,0,74,67,1,0,
		0,0,74,68,1,0,0,0,74,69,1,0,0,0,74,70,1,0,0,0,74,71,1,0,0,0,74,72,1,0,
		0,0,74,73,1,0,0,0,75,3,1,0,0,0,76,78,5,1,0,0,77,79,3,2,1,0,78,77,1,0,0,
		0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,82,1,0,0,0,82,83,5,2,0,
		0,83,5,1,0,0,0,84,85,5,59,0,0,85,86,5,51,0,0,86,110,3,40,20,0,87,88,5,
		59,0,0,88,89,5,52,0,0,89,110,3,40,20,0,90,91,5,59,0,0,91,92,5,53,0,0,92,
		110,3,40,20,0,93,94,5,59,0,0,94,95,5,54,0,0,95,110,3,40,20,0,96,97,5,3,
		0,0,97,98,5,59,0,0,98,99,5,50,0,0,99,100,5,52,0,0,100,110,3,40,20,0,101,
		102,5,3,0,0,102,103,5,59,0,0,103,110,5,50,0,0,104,105,5,3,0,0,105,106,
		3,40,20,0,106,107,5,52,0,0,107,108,3,40,20,0,108,110,1,0,0,0,109,84,1,
		0,0,0,109,87,1,0,0,0,109,90,1,0,0,0,109,93,1,0,0,0,109,96,1,0,0,0,109,
		101,1,0,0,0,109,104,1,0,0,0,110,7,1,0,0,0,111,112,5,59,0,0,112,113,7,0,
		0,0,113,114,5,1,0,0,114,115,5,2,0,0,115,116,5,50,0,0,116,117,5,4,0,0,117,
		118,3,12,6,0,118,119,5,5,0,0,119,167,1,0,0,0,120,121,5,3,0,0,121,122,5,
		59,0,0,122,123,5,1,0,0,123,124,5,2,0,0,124,167,5,50,0,0,125,126,5,59,0,
		0,126,127,5,51,0,0,127,128,5,1,0,0,128,129,5,2,0,0,129,130,5,1,0,0,130,
		131,5,2,0,0,131,132,5,50,0,0,132,133,5,4,0,0,133,134,3,10,5,0,134,135,
		5,6,0,0,135,136,5,5,0,0,136,167,1,0,0,0,137,138,5,59,0,0,138,139,5,1,0,
		0,139,140,3,40,20,0,140,141,5,2,0,0,141,142,5,1,0,0,142,143,3,40,20,0,
		143,144,5,2,0,0,144,145,5,52,0,0,145,146,5,4,0,0,146,147,3,10,5,0,147,
		148,5,5,0,0,148,167,1,0,0,0,149,150,5,59,0,0,150,151,5,1,0,0,151,152,3,
		40,20,0,152,153,5,2,0,0,153,154,5,1,0,0,154,155,3,40,20,0,155,156,5,2,
		0,0,156,157,5,52,0,0,157,158,3,54,27,0,158,167,1,0,0,0,159,160,5,59,0,
		0,160,161,5,1,0,0,161,162,3,40,20,0,162,163,5,2,0,0,163,164,5,52,0,0,164,
		165,3,54,27,0,165,167,1,0,0,0,166,111,1,0,0,0,166,120,1,0,0,0,166,125,
		1,0,0,0,166,137,1,0,0,0,166,149,1,0,0,0,166,159,1,0,0,0,167,9,1,0,0,0,
		168,169,5,4,0,0,169,170,3,12,6,0,170,178,5,5,0,0,171,172,5,6,0,0,172,173,
		5,4,0,0,173,174,3,12,6,0,174,175,5,5,0,0,175,177,1,0,0,0,176,171,1,0,0,
		0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,187,1,0,0,0,180,
		178,1,0,0,0,181,182,5,4,0,0,182,183,3,12,6,0,183,184,5,5,0,0,184,185,5,
		6,0,0,185,187,1,0,0,0,186,168,1,0,0,0,186,181,1,0,0,0,187,11,1,0,0,0,188,
		189,6,6,-1,0,189,190,3,40,20,0,190,196,1,0,0,0,191,192,10,2,0,0,192,193,
		5,6,0,0,193,195,3,40,20,0,194,191,1,0,0,0,195,198,1,0,0,0,196,194,1,0,
		0,0,196,197,1,0,0,0,197,13,1,0,0,0,198,196,1,0,0,0,199,206,5,7,0,0,200,
		206,5,8,0,0,201,203,5,9,0,0,202,204,3,40,20,0,203,202,1,0,0,0,203,204,
		1,0,0,0,204,206,1,0,0,0,205,199,1,0,0,0,205,200,1,0,0,0,205,201,1,0,0,
		0,206,15,1,0,0,0,207,209,3,18,9,0,208,207,1,0,0,0,209,210,1,0,0,0,210,
		208,1,0,0,0,210,211,1,0,0,0,211,223,1,0,0,0,212,214,3,22,11,0,213,212,
		1,0,0,0,214,215,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,223,1,0,0,
		0,217,219,3,24,12,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,
		221,1,0,0,0,221,223,1,0,0,0,222,208,1,0,0,0,222,213,1,0,0,0,222,218,1,
		0,0,0,223,17,1,0,0,0,224,226,5,10,0,0,225,227,5,11,0,0,226,225,1,0,0,0,
		226,227,1,0,0,0,227,229,1,0,0,0,228,230,3,40,20,0,229,228,1,0,0,0,230,
		231,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,235,5,
		12,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,240,5,4,0,0,
		237,239,3,2,1,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,
		1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,245,5,5,0,0,244,246,3,20,10,
		0,245,244,1,0,0,0,245,246,1,0,0,0,246,19,1,0,0,0,247,248,5,13,0,0,248,
		259,3,18,9,0,249,250,5,13,0,0,250,254,5,4,0,0,251,253,3,2,1,0,252,251,
		1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,
		0,256,254,1,0,0,0,257,259,5,5,0,0,258,247,1,0,0,0,258,249,1,0,0,0,259,
		21,1,0,0,0,260,261,5,14,0,0,261,262,3,40,20,0,262,266,5,4,0,0,263,265,
		3,2,1,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,
		0,267,269,1,0,0,0,268,266,1,0,0,0,269,270,5,5,0,0,270,303,1,0,0,0,271,
		272,5,14,0,0,272,273,3,6,3,0,273,274,5,15,0,0,274,275,3,40,20,0,275,276,
		5,15,0,0,276,277,3,2,1,0,277,281,5,4,0,0,278,280,3,2,1,0,279,278,1,0,0,
		0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,
		281,1,0,0,0,284,285,5,5,0,0,285,303,1,0,0,0,286,287,5,14,0,0,287,288,3,
		40,20,0,288,289,5,6,0,0,289,290,3,40,20,0,290,291,5,51,0,0,291,292,5,16,
		0,0,292,293,3,40,20,0,293,297,5,4,0,0,294,296,3,2,1,0,295,294,1,0,0,0,
		296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,297,
		1,0,0,0,300,301,5,5,0,0,301,303,1,0,0,0,302,260,1,0,0,0,302,271,1,0,0,
		0,302,286,1,0,0,0,303,23,1,0,0,0,304,305,5,17,0,0,305,306,3,40,20,0,306,
		308,5,4,0,0,307,309,3,26,13,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,
		1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,5,5,0,0,313,25,1,0,0,0,
		314,315,6,13,-1,0,315,316,3,28,14,0,316,321,1,0,0,0,317,318,10,2,0,0,318,
		320,3,28,14,0,319,317,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,
		1,0,0,0,322,27,1,0,0,0,323,321,1,0,0,0,324,325,5,18,0,0,325,326,3,40,20,
		0,326,330,5,19,0,0,327,329,3,2,1,0,328,327,1,0,0,0,329,332,1,0,0,0,330,
		328,1,0,0,0,330,331,1,0,0,0,331,342,1,0,0,0,332,330,1,0,0,0,333,334,5,
		20,0,0,334,338,5,19,0,0,335,337,3,2,1,0,336,335,1,0,0,0,337,340,1,0,0,
		0,338,336,1,0,0,0,338,339,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,341,
		324,1,0,0,0,341,333,1,0,0,0,342,29,1,0,0,0,343,344,5,21,0,0,344,345,5,
		59,0,0,345,346,5,11,0,0,346,347,3,32,16,0,347,348,5,12,0,0,348,352,5,4,
		0,0,349,351,3,2,1,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,
		353,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,5,5,0,0,356,394,1,
		0,0,0,357,358,5,21,0,0,358,359,5,59,0,0,359,360,5,11,0,0,360,361,3,32,
		16,0,361,362,5,12,0,0,362,363,5,50,0,0,363,367,5,4,0,0,364,366,3,2,1,0,
		365,364,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,370,
		1,0,0,0,369,367,1,0,0,0,370,371,5,5,0,0,371,394,1,0,0,0,372,373,5,21,0,
		0,373,374,5,11,0,0,374,375,3,40,20,0,375,376,3,40,20,0,376,377,5,12,0,
		0,377,378,5,59,0,0,378,379,5,11,0,0,379,380,3,32,16,0,380,382,5,12,0,0,
		381,383,5,50,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,388,
		5,4,0,0,385,387,3,2,1,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,0,0,
		0,388,389,1,0,0,0,389,391,1,0,0,0,390,388,1,0,0,0,391,392,5,5,0,0,392,
		394,1,0,0,0,393,343,1,0,0,0,393,357,1,0,0,0,393,372,1,0,0,0,394,31,1,0,
		0,0,395,396,5,59,0,0,396,402,5,50,0,0,397,398,5,6,0,0,398,399,5,59,0,0,
		399,401,5,50,0,0,400,397,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,
		1,0,0,0,403,407,1,0,0,0,404,402,1,0,0,0,405,407,1,0,0,0,406,395,1,0,0,
		0,406,405,1,0,0,0,407,33,1,0,0,0,408,409,5,22,0,0,409,411,5,11,0,0,410,
		412,3,36,18,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,414,
		5,12,0,0,414,35,1,0,0,0,415,416,6,18,-1,0,416,417,3,40,20,0,417,423,1,
		0,0,0,418,419,10,2,0,0,419,420,5,6,0,0,420,422,3,40,20,0,421,418,1,0,0,
		0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,37,1,0,0,0,425,423,
		1,0,0,0,426,427,5,59,0,0,427,431,5,23,0,0,428,429,5,59,0,0,429,431,5,24,
		0,0,430,426,1,0,0,0,430,428,1,0,0,0,431,39,1,0,0,0,432,433,3,42,21,0,433,
		41,1,0,0,0,434,435,6,21,-1,0,435,436,5,11,0,0,436,437,3,42,21,0,437,438,
		5,12,0,0,438,489,1,0,0,0,439,440,5,1,0,0,440,441,3,42,21,0,441,442,5,2,
		0,0,442,489,1,0,0,0,443,444,5,25,0,0,444,489,3,42,21,24,445,446,5,26,0,
		0,446,489,3,42,21,23,447,489,5,56,0,0,448,489,5,55,0,0,449,489,5,57,0,
		0,450,489,5,58,0,0,451,489,5,60,0,0,452,453,5,59,0,0,453,454,5,35,0,0,
		454,455,5,59,0,0,455,457,5,11,0,0,456,458,3,44,22,0,457,456,1,0,0,0,457,
		458,1,0,0,0,458,459,1,0,0,0,459,489,5,12,0,0,460,461,5,59,0,0,461,463,
		5,11,0,0,462,464,3,44,22,0,463,462,1,0,0,0,463,464,1,0,0,0,464,465,1,0,
		0,0,465,489,5,12,0,0,466,467,5,59,0,0,467,468,5,1,0,0,468,469,3,42,21,
		0,469,470,5,2,0,0,470,471,5,1,0,0,471,472,3,42,21,0,472,473,5,2,0,0,473,
		489,1,0,0,0,474,475,5,59,0,0,475,476,5,1,0,0,476,477,3,42,21,0,477,478,
		5,2,0,0,478,489,1,0,0,0,479,480,5,59,0,0,480,481,5,35,0,0,481,489,5,59,
		0,0,482,483,5,59,0,0,483,484,5,35,0,0,484,489,3,40,20,0,485,489,5,59,0,
		0,486,489,3,54,27,0,487,489,3,46,23,0,488,434,1,0,0,0,488,439,1,0,0,0,
		488,443,1,0,0,0,488,445,1,0,0,0,488,447,1,0,0,0,488,448,1,0,0,0,488,449,
		1,0,0,0,488,450,1,0,0,0,488,451,1,0,0,0,488,452,1,0,0,0,488,460,1,0,0,
		0,488,466,1,0,0,0,488,474,1,0,0,0,488,479,1,0,0,0,488,482,1,0,0,0,488,
		485,1,0,0,0,488,486,1,0,0,0,488,487,1,0,0,0,489,516,1,0,0,0,490,491,10,
		22,0,0,491,492,5,27,0,0,492,515,3,42,21,23,493,494,10,21,0,0,494,495,7,
		1,0,0,495,515,3,42,21,22,496,497,10,20,0,0,497,498,7,2,0,0,498,515,3,42,
		21,21,499,500,10,19,0,0,500,501,7,3,0,0,501,515,3,42,21,20,502,503,10,
		18,0,0,503,504,5,35,0,0,504,515,3,42,21,19,505,506,10,17,0,0,506,507,7,
		4,0,0,507,515,3,42,21,18,508,509,10,16,0,0,509,510,5,38,0,0,510,515,3,
		42,21,17,511,512,10,15,0,0,512,513,5,39,0,0,513,515,3,42,21,16,514,490,
		1,0,0,0,514,493,1,0,0,0,514,496,1,0,0,0,514,499,1,0,0,0,514,502,1,0,0,
		0,514,505,1,0,0,0,514,508,1,0,0,0,514,511,1,0,0,0,515,518,1,0,0,0,516,
		514,1,0,0,0,516,517,1,0,0,0,517,43,1,0,0,0,518,516,1,0,0,0,519,520,6,22,
		-1,0,520,521,3,42,21,0,521,527,1,0,0,0,522,523,10,2,0,0,523,524,5,6,0,
		0,524,526,3,42,21,0,525,522,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,
		528,1,0,0,0,528,45,1,0,0,0,529,527,1,0,0,0,530,531,5,40,0,0,531,532,5,
		11,0,0,532,533,5,58,0,0,533,574,5,12,0,0,534,535,5,41,0,0,535,536,5,11,
		0,0,536,537,5,58,0,0,537,574,5,12,0,0,538,539,5,42,0,0,539,540,5,11,0,
		0,540,541,5,59,0,0,541,574,5,12,0,0,542,543,5,43,0,0,543,544,5,11,0,0,
		544,545,5,59,0,0,545,546,5,6,0,0,546,547,3,54,27,0,547,548,5,12,0,0,548,
		574,1,0,0,0,549,550,5,44,0,0,550,551,5,11,0,0,551,552,5,59,0,0,552,553,
		5,6,0,0,553,554,5,58,0,0,554,574,5,12,0,0,555,556,5,45,0,0,556,563,5,11,
		0,0,557,564,5,59,0,0,558,559,5,59,0,0,559,560,5,1,0,0,560,561,3,54,27,
		0,561,562,5,2,0,0,562,564,1,0,0,0,563,557,1,0,0,0,563,558,1,0,0,0,564,
		565,1,0,0,0,565,574,5,12,0,0,566,567,5,46,0,0,567,568,5,11,0,0,568,569,
		5,59,0,0,569,570,5,6,0,0,570,571,3,54,27,0,571,572,5,12,0,0,572,574,1,
		0,0,0,573,530,1,0,0,0,573,534,1,0,0,0,573,538,1,0,0,0,573,542,1,0,0,0,
		573,549,1,0,0,0,573,555,1,0,0,0,573,566,1,0,0,0,574,47,1,0,0,0,575,576,
		5,47,0,0,576,577,5,59,0,0,577,578,5,48,0,0,578,580,5,4,0,0,579,581,3,52,
		26,0,580,579,1,0,0,0,581,582,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
		584,1,0,0,0,584,585,5,5,0,0,585,613,1,0,0,0,586,587,3,40,20,0,587,588,
		5,52,0,0,588,589,3,40,20,0,589,613,1,0,0,0,590,591,3,40,20,0,591,592,5,
		51,0,0,592,593,3,40,20,0,593,595,5,4,0,0,594,596,3,50,25,0,595,594,1,0,
		0,0,596,597,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,599,1,0,0,0,599,
		600,5,5,0,0,600,613,1,0,0,0,601,602,3,40,20,0,602,603,5,35,0,0,603,604,
		3,40,20,0,604,606,5,11,0,0,605,607,3,50,25,0,606,605,1,0,0,0,607,608,1,
		0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,611,5,12,0,0,
		611,613,1,0,0,0,612,575,1,0,0,0,612,586,1,0,0,0,612,590,1,0,0,0,612,601,
		1,0,0,0,613,49,1,0,0,0,614,615,3,40,20,0,615,616,5,19,0,0,616,617,3,40,
		20,0,617,619,1,0,0,0,618,614,1,0,0,0,619,620,1,0,0,0,620,618,1,0,0,0,620,
		621,1,0,0,0,621,623,1,0,0,0,622,624,5,6,0,0,623,622,1,0,0,0,623,624,1,
		0,0,0,624,636,1,0,0,0,625,627,3,40,20,0,626,625,1,0,0,0,627,628,1,0,0,
		0,628,626,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,632,5,6,0,0,631,
		630,1,0,0,0,631,632,1,0,0,0,632,636,1,0,0,0,633,634,5,50,0,0,634,636,5,
		59,0,0,635,618,1,0,0,0,635,626,1,0,0,0,635,633,1,0,0,0,636,51,1,0,0,0,
		637,638,5,59,0,0,638,642,5,59,0,0,639,640,5,59,0,0,640,642,5,50,0,0,641,
		637,1,0,0,0,641,639,1,0,0,0,642,53,1,0,0,0,643,651,5,56,0,0,644,651,5,
		55,0,0,645,651,5,58,0,0,646,651,5,60,0,0,647,651,5,57,0,0,648,651,5,59,
		0,0,649,651,5,49,0,0,650,643,1,0,0,0,650,644,1,0,0,0,650,645,1,0,0,0,650,
		646,1,0,0,0,650,647,1,0,0,0,650,648,1,0,0,0,650,649,1,0,0,0,651,55,1,0,
		0,0,59,59,74,80,109,166,178,186,196,203,205,210,215,220,222,226,231,234,
		240,245,254,258,266,281,297,302,310,321,330,338,341,352,367,382,388,393,
		402,406,411,423,430,457,463,488,514,516,527,563,573,582,597,608,612,620,
		623,628,631,635,641,650
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
